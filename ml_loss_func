public class GradientDescent {

    static float derivativeW1(float x1, float x2, float y, float w1, float w2) {
        return 2 * (y - ((w1 * x1) + (w2 * x2))) * (-x1);
    }

    static float derivativeW2(float x1, float x2, float y, float w1, float w2) {
        return 2 * (y - ((w1 * x1) + (w2 * x2))) * (-x2);
    }

    public static void main(String[] args) {
        float w1 = 1, w2 = 7;
        float learningRate = 0.01f;
        int iterations = 1000;
        float[][] arr = {{0, 1, 1}, {2, 1, 9}, {1, 0, 1}, {-2, 1, 7}};

        for (int iter = 0; iter < iterations; iter++) {
            float dw1 = 0, dw2 = 0;
            for (int i = 0; i < 4; i++) {
                dw1 += derivativeW1(arr[i][0], arr[i][1], arr[i][2], w1, w2);
                dw2 += derivativeW2(arr[i][0], arr[i][1], arr[i][2], w1, w2);
            }
            dw1 /= 4;
            dw2 /= 4;

            w1 -= learningRate * dw1;
            w2 -= learningRate * dw2;
        }

        System.out.println("Final w1: " + w1);
        System.out.println("Final w2: " + w2);
    }
}
